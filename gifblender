#!/usr/bin/env bash
# Copyright (c) 2012-2015 Georgi Valkov. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#
#   3. Neither the name of author nor the names of its contributors may
#      be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL GEORGI VALKOV BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# I really needed a short break from Python, so I wrote this.

set -u

#-----------------------------------------------------------------------------
# Handle options and usage.
usage="\
Usage: $(basename "$0") [options] <img.gif>|<img1> <img2> ...

Options:
  -h, --help               show this help message and exit
  -o, --outdir <arg>       output directory
  -s, --steps <arg>        number of steps
  -t, --transition <arg>   transition timing
  -b, --blend-last         blend first and last frames

Available transition timings:
  linear (default)
  ease
  ease-in
  ease-out
  ease-in-out\
"

if [ $# -eq 0 ]; then
  echo "$usage"
  exit 1
fi

## Default options
CONFIG_DO_HELP=1
CONFIG_STEPS=10
CONFIG_OUTDIR=""
CONFIG_BLEND_LAST=1
CONFIG_TRANSITION=linear

# Instead of requiring a `getopts` that supports long options, we simply
# translate all long options to their short equivalents. While most BSDs
# provide GNU `getopts` in their ports collection, this approach is simpler.
function longopts_to_shortopts () {
  local delim=""
  local opts=""
  for opt in "$@"; do
    delim=""
    case "$opt" in
      --outdir)      opts="${opts}-o ";;
      --transition)  opts="${opts}-t ";;
      --steps)       opts="${opts}-s ";;
      --help)        opts="${opts}-h ";;
      --blend-last)  opts="${opts}-b ";;
      *)
        [ "${opt:0:1}" != "-" ] && delim='"'
        opts="${opts}${delim}${opt}${delim} "
        ;;
    esac
  done
  echo "$opts"
}

eval set -- $(longopts_to_shortopts "$@")

while getopts "o:t:s:bh" opt; do
  case "$opt" in
    o) CONFIG_OUTDIR="$OPTARG";;
    t) CONFIG_TRANSITION="$OPTARG";;
    s) CONFIG_STEPS="$OPTARG";;
    h) CONFIG_DO_HELP=0;;
    b) CONFIG_BLEND_LAST=0;;
  esac
done
shift $(( OPTIND - 1 ))

if [ $CONFIG_DO_HELP -eq 0 ]; then
   echo "$usage"
   exit 0
fi

if [ -z "$CONFIG_OUTDIR" ]; then
  echo "please specify output directory with -o|--outdir"
  exit 1
fi

#-----------------------------------------------------------------------------
# Return n blending steps from 0 to 100%.
# A good explanation on what's about to happen can be found here:
# http://st-on-it.blogspot.com/2011/05/calculating-cubic-bezier-function.html
function blending-steps () {
  # $1 -> number of steps
  # $2..5 -> (x1, y1)(x3, y3)

  cat <<EOF | bc
scale = 4
inc = 1.0/$1

define abs(x) {
  if (0>x) return x*-1
  return x
}

define round(x) {
  auto save
  save = scale ; scale = 0
  x = (x + 0.5)/1
  scale = save

  return x
}

# p0 and p2 are fixed to (0,0) and (1,1)
define cubic_bezier(t, x1, y1, x3, y3) {
  auto ax, ay, bx, by, cx, cy, xy

  cx = 3 * x1
  bx = 3 * (x3-x1) - cx
  ax = 1 - cx - bx

  cy = 3 * y1
  by = 3 * (y3 - y1) - cy
  ay = 1 - cy - by

  xy[0] = (cx + t * (bx + t * ax)) * t
  xy[1] = (cy + t * (by + t * ay)) * t

  return xy
}

# solve using bisection
define solve(t, x1, y1, x3, y3) {
  auto t0, a, b, xy
  t0 = 0.0 ; a = 1.0 ; b = t

  while (t0 < a) {
    xy = cubic_bezier(b, x1, y1, x3, y3)
    x = xy[0]

    if (abs(x-t) < 0.001) return b
    if (t>x) {
      t0 = b
    } else {
      a = b
    }

    b = (a - t0)*0.5 + t0
  }

  xy = cubic_bezier(b, x1, y1, x3, y3)
  x = xy[0]
  return x
}

for (t=0.0 ; t<=1.0; t+=inc) {
  x = solve(t, $2, $3, $4, $5)
  xy = cubic_bezier(x, $2, $3, $4, $5)
  round(xy[1] * 100)
}
EOF
}

# The control point values were taken from the transition-timing-function
# property in css3.
function get-blending-steps () {
  case "$1" in
    linear)      p=$(blending-steps "$CONFIG_STEPS" 0 0 1 1);;
    ease)        p=$(blending-steps "$CONFIG_STEPS" 0.25 0.1 0.25 1);;
    ease-in)     p=$(blending-steps "$CONFIG_STEPS" 0.42 0 1 1);;
    ease-out)    p=$(blending-steps "$CONFIG_STEPS" 0 0 0.58 1);;
    ease-in-out) p=$(blending-steps "$CONFIG_STEPS" 0.42 0 0.58 1);;
  esac
  echo "$p"
}


# # Useful for debugging the values produced by get-blending-steps
# function list-transitions () {
#   for t in ${CONFIG_TRANSITION[@]}; do
#     local points=$(get-blending-steps "$t" | xargs)
#     printf "%-12s %s %s\n" "$t": $(spark.py $points) "$points"
#   done
# }


# frame-025.gif -> frame-026.gif
function next-in-seq () {
  # will break if extension has numbers in it
  local next
  next=$(echo "$1" | grep -oE '[0-9]+' | tail -1)
  next=$(printf "%04d" $(( next + 1 )))
  echo "$1" | sed -e "s|-[0-9]*\.|-${next}.|"
}


function get-cpu-count () {
  # Linux-en
  if [ -r /proc/cpuinfo ]; then
    grep -c processor /proc/cpuinfo
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OS
    sysctl hw.ncpu | grep -o '\d'
  else
    # FreeBSD
    sysctl dev.cpu | grep -c location
  fi
}


function blend-images () {
  local i=0
  local ncores=$(get-cpu-count)

  echo -e "\nBlending $(basename "$2") with $(basename "$3"):"

  local percent=0
  local prev_out=""
  for percent in $1; do
    percent=$(printf "%04d" $percent)

    fn="${2%.*}"
    ext="${2#*.}"
    out="${fn}-${percent}.${ext}"

    if [ "$prev_out" = "$out" ]; then
      out="${fn}-${percent}a.${ext}"
    fi

    printf "%s + %-4s + %s -> %s \n" $(basename "$2") "${percent}%" $(basename "$3") $(basename "$out")
    x_args[$i]=$"${percent}%\n${2}\n${3}\n${out}\n"
    i=$(( i + 1 ))
    prev_out="$out"
  done

  # Parallel execution speeds things up a lot, but it also makes the process
  # hard to interrupt.
  # Check for GNU xargs (Mac OSX via brew install findutils) as the default OSX 
  # xargs does not have -d
  if hash gxargs 2>/dev/null; then
    echo -en "${x_args[@]}" \
      | gxargs -P $(( ncores + 1 )) -d '\n' -n 4 \
      sh -c 'composite -blend "$1" "$2" "$3" "$4"' ign
  else
    echo -en "${x_args[@]}" \
      | xargs -P $(( ncores + 1 )) -d '\n' -n 4 \
      sh -c 'composite -blend "$1" "$2" "$3" "$4"' ign
  fi
}


function extract-gif () {
  echo "Extracting $(identify "$1" | wc -l) frames from $1"
  convert -coalesce "$1" "${CONFIG_OUTDIR}/frame-%04d.gif"
}


function prepare-input-files () {
  if [[ ( $# -eq 1 ) && ( "$1" =~ .[gG][iI][fF]$ ) ]]; then
    # Input is a GIF.
    mkdir -p "$CONFIG_OUTDIR"
    extract-gif "$1"
  else
    # Input is a series of images.
    mkdir -p "$CONFIG_OUTDIR"
    local i=0
    local n=$#

    while [ $n -gt $i  ]; do
      local ext="${1#*.}"
      cp "$1" $(printf "${CONFIG_OUTDIR}/frame-%04d.${ext}" $i)
      i=$(( i + 1 ))
      shift
    done
  fi
}


function copy-first-last () {
  local first="$1"
  local last="$2"
  local new_frame=$(next-in-seq $last)

  echo "Creating extra frame '$(basename $new_frame)' from '$(basename $first)'"
  cp -l "$first" "$new_frame"
}


#-----------------------------------------------------------------------------

# Extract input GIF or copy input image sequence to $CONFIG_OUTDIR.
prepare-input-files "$@"

# Get blending steps (e.g. 0 2 6 13 21 32 43 55 69 84 100).
points=$(get-blending-steps "$CONFIG_TRANSITION")

shopt -s dotglob
shopt -s nullglob

IFS="$(printf '\n\t')"
declare -a FRAMES=("${CONFIG_OUTDIR}"/frame-*.*)
declare -r NFRAMES=${#FRAMES[@]}

# Create a seemless transition from the last to the first frame.
if [ $CONFIG_BLEND_LAST -eq 0 ]; then
  copy-first-last "${FRAMES[0]}" "${FRAMES[$(( NFRAMES - 1 ))]}"
  FRAMES=("${CONFIG_OUTDIR}"/frame-*.*)
fi

# Blend images, possibly in parallel.
prev=""
for img in ${FRAMES[@]}; do
  if [ -z "$prev" ]; then
    prev="$img"
    continue
  fi

  blend-images "$points" "$img" "$prev"
  prev="$img"
done

# Remove extracted/copied frames.
printf "%s\n" "${FRAMES[@]}" | xargs -d '\n' rm
